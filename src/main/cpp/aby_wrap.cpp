/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGJAVA
#define SWIGJAVA
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1,
  SWIG_JavaIOException,
  SWIG_JavaRuntimeException,
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError,
  SWIG_JavaIllegalStateException,
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { SWIG_JavaIllegalStateException, "java/lang/IllegalStateException" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#include <stdint.h>		// Use the C99 official header


#include <string>


#include <typeinfo>
#include <stdexcept>


#include <vector>
#include <stdexcept>


/* Check for overflow converting to Java int (always signed 32-bit) from (unsigned variable-bit) size_t */
SWIGINTERN jint SWIG_JavaIntFromSize_t(size_t size) {
  static const jint JINT_MAX = 0x7FFFFFFF;
  return (size > (size_t)JINT_MAX) ? -1 : (jint)size;
}


SWIGINTERN jint SWIG_VectorSize(size_t size) {
  jint sz = SWIG_JavaIntFromSize_t(size);
  if (sz == -1)
    throw std::out_of_range("vector size is too large to fit into a Java int");
  return sz;
}

SWIGINTERN std::vector< uint32_t > *new_std_vector_Sl_uint32_t_Sg___SWIG_2(jint count,unsigned int const &value){
        if (count < 0)
          throw std::out_of_range("vector count must be positive");
        return new std::vector< unsigned int >(static_cast<std::vector< unsigned int >::size_type>(count), value);
      }
SWIGINTERN jint std_vector_Sl_uint32_t_Sg__doSize(std::vector< uint32_t > const *self){
        return SWIG_VectorSize(self->size());
      }
SWIGINTERN void std_vector_Sl_uint32_t_Sg__doAdd__SWIG_0(std::vector< uint32_t > *self,std::vector< unsigned int >::value_type const &x){
        self->push_back(x);
      }
SWIGINTERN void std_vector_Sl_uint32_t_Sg__doAdd__SWIG_1(std::vector< uint32_t > *self,jint index,std::vector< unsigned int >::value_type const &x){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index <= size) {
          self->insert(self->begin() + index, x);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< unsigned int >::value_type std_vector_Sl_uint32_t_Sg__doRemove(std::vector< uint32_t > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (0 <= index && index < size) {
          unsigned int const old_value = (*self)[index];
          self->erase(self->begin() + index);
          return old_value;
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }
SWIGINTERN std::vector< unsigned int >::value_type const &std_vector_Sl_uint32_t_Sg__doGet(std::vector< uint32_t > *self,jint index){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size)
          return (*self)[index];
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN std::vector< unsigned int >::value_type std_vector_Sl_uint32_t_Sg__doSet(std::vector< uint32_t > *self,jint index,std::vector< unsigned int >::value_type const &val){
        jint size = static_cast<jint>(self->size());
        if (index >= 0 && index < size) {
          unsigned int const old_value = (*self)[index];
          (*self)[index] = val;
          return old_value;
        }
        else
          throw std::out_of_range("vector index out of range");
      }
SWIGINTERN void std_vector_Sl_uint32_t_Sg__doRemoveRange(std::vector< uint32_t > *self,jint fromIndex,jint toIndex){
        jint size = static_cast<jint>(self->size());
        if (0 <= fromIndex && fromIndex <= toIndex && toIndex <= size) {
          self->erase(self->begin() + fromIndex, self->begin() + toIndex);
        } else {
          throw std::out_of_range("vector index out of range");
        }
      }

#include "abycore/aby/abyparty.h"
#include "abycore/circuit/circuit.h"
#include "abycore/circuit/share.h"
#include "abycore/sharing/sharing.h"

SWIGINTERN Circuit *ABYParty_GetCircuitBuilder(ABYParty *self,e_sharing sharing){
        return self->GetSharings()[sharing]->GetCircuitBuildRoutine();
    }

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_de_tu_1darmstadt_cs_encrypto_aby_AbyJNI_new_1UInt32Vector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< uint32_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< uint32_t > *)new std::vector< uint32_t >();
  *(std::vector< uint32_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_tu_1darmstadt_cs_encrypto_aby_AbyJNI_new_1UInt32Vector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< uint32_t > *arg1 = 0 ;
  std::vector< uint32_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint32_t > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< uint32_t > const & reference is null");
    return 0;
  } 
  result = (std::vector< uint32_t > *)new std::vector< uint32_t >((std::vector< uint32_t > const &)*arg1);
  *(std::vector< uint32_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_tu_1darmstadt_cs_encrypto_aby_AbyJNI_UInt32Vector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  std::vector< unsigned int >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint32_t > **)&jarg1; 
  result = ((std::vector< uint32_t > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_tu_1darmstadt_cs_encrypto_aby_AbyJNI_UInt32Vector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  std::vector< unsigned int >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint32_t > **)&jarg1; 
  arg2 = (std::vector< unsigned int >::size_type)jarg2; 
  try {
    (arg1)->reserve(arg2);
  } catch(std::length_error &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jboolean JNICALL Java_de_tu_1darmstadt_cs_encrypto_aby_AbyJNI_UInt32Vector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint32_t > **)&jarg1; 
  result = (bool)((std::vector< uint32_t > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_tu_1darmstadt_cs_encrypto_aby_AbyJNI_UInt32Vector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint32_t > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_de_tu_1darmstadt_cs_encrypto_aby_AbyJNI_new_1UInt32Vector_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  jint arg1 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  std::vector< uint32_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  try {
    result = (std::vector< uint32_t > *)new_std_vector_Sl_uint32_t_Sg___SWIG_2(arg1,(unsigned int const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  *(std::vector< uint32_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_tu_1darmstadt_cs_encrypto_aby_AbyJNI_UInt32Vector_1doSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint32_t > **)&jarg1; 
  try {
    result = std_vector_Sl_uint32_t_Sg__doSize((std::vector< unsigned int > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_tu_1darmstadt_cs_encrypto_aby_AbyJNI_UInt32Vector_1doAdd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  std::vector< unsigned int >::value_type *arg2 = 0 ;
  std::vector< unsigned int >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint32_t > **)&jarg1; 
  temp2 = (std::vector< unsigned int >::value_type)jarg2; 
  arg2 = &temp2; 
  std_vector_Sl_uint32_t_Sg__doAdd__SWIG_0(arg1,(unsigned int const &)*arg2);
}


SWIGEXPORT void JNICALL Java_de_tu_1darmstadt_cs_encrypto_aby_AbyJNI_UInt32Vector_1doAdd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  jint arg2 ;
  std::vector< unsigned int >::value_type *arg3 = 0 ;
  std::vector< unsigned int >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint32_t > **)&jarg1; 
  arg2 = jarg2; 
  temp3 = (std::vector< unsigned int >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_uint32_t_Sg__doAdd__SWIG_1(arg1,arg2,(unsigned int const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jlong JNICALL Java_de_tu_1darmstadt_cs_encrypto_aby_AbyJNI_UInt32Vector_1doRemove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  jint arg2 ;
  std::vector< unsigned int >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint32_t > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< unsigned int >::value_type)std_vector_Sl_uint32_t_Sg__doRemove(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_tu_1darmstadt_cs_encrypto_aby_AbyJNI_UInt32Vector_1doGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  jint arg2 ;
  std::vector< unsigned int >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint32_t > **)&jarg1; 
  arg2 = jarg2; 
  try {
    result = (std::vector< unsigned int >::value_type *) &std_vector_Sl_uint32_t_Sg__doGet(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = (jlong)*result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_tu_1darmstadt_cs_encrypto_aby_AbyJNI_UInt32Vector_1doSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  jint arg2 ;
  std::vector< unsigned int >::value_type *arg3 = 0 ;
  std::vector< unsigned int >::value_type temp3 ;
  std::vector< unsigned int >::value_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint32_t > **)&jarg1; 
  arg2 = jarg2; 
  temp3 = (std::vector< unsigned int >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    result = (std::vector< unsigned int >::value_type)std_vector_Sl_uint32_t_Sg__doSet(arg1,arg2,(unsigned int const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_tu_1darmstadt_cs_encrypto_aby_AbyJNI_UInt32Vector_1doRemoveRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< uint32_t > *arg1 = (std::vector< uint32_t > *) 0 ;
  jint arg2 ;
  jint arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint32_t > **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  try {
    std_vector_Sl_uint32_t_Sg__doRemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
}


SWIGEXPORT jlong JNICALL Java_de_tu_1darmstadt_cs_encrypto_aby_AbyJNI_new_1ABYParty_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jint jarg3, jlong jarg4, jobject jarg4_, jlong jarg5, jlong jarg6, jint jarg7, jlong jarg8, jstring jarg9) {
  jlong jresult = 0 ;
  e_role arg1 ;
  std::string *arg2 = 0 ;
  uint16_t arg3 ;
  seclvl arg4 ;
  uint32_t arg5 ;
  uint32_t arg6 ;
  e_mt_gen_alg arg7 ;
  uint32_t arg8 ;
  std::string *arg9 = 0 ;
  seclvl *argp4 ;
  ABYParty *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg4_;
  arg1 = (e_role)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (uint16_t)jarg3; 
  argp4 = *(seclvl **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null seclvl");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = (uint32_t)jarg5; 
  arg6 = (uint32_t)jarg6; 
  arg7 = (e_mt_gen_alg)jarg7; 
  arg8 = (uint32_t)jarg8; 
  if(!jarg9) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg9_pstr = (const char *)jenv->GetStringUTFChars(jarg9, 0); 
  if (!arg9_pstr) return 0;
  std::string arg9_str(arg9_pstr);
  arg9 = &arg9_str;
  jenv->ReleaseStringUTFChars(jarg9, arg9_pstr); 
  result = (ABYParty *)new ABYParty(arg1,(std::string const &)*arg2,arg3,arg4,arg5,arg6,arg7,arg8,(std::string const &)*arg9);
  *(ABYParty **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_tu_1darmstadt_cs_encrypto_aby_AbyJNI_new_1ABYParty_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jint jarg3, jlong jarg4, jobject jarg4_, jlong jarg5, jlong jarg6, jint jarg7, jlong jarg8) {
  jlong jresult = 0 ;
  e_role arg1 ;
  std::string *arg2 = 0 ;
  uint16_t arg3 ;
  seclvl arg4 ;
  uint32_t arg5 ;
  uint32_t arg6 ;
  e_mt_gen_alg arg7 ;
  uint32_t arg8 ;
  seclvl *argp4 ;
  ABYParty *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg4_;
  arg1 = (e_role)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (uint16_t)jarg3; 
  argp4 = *(seclvl **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null seclvl");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = (uint32_t)jarg5; 
  arg6 = (uint32_t)jarg6; 
  arg7 = (e_mt_gen_alg)jarg7; 
  arg8 = (uint32_t)jarg8; 
  result = (ABYParty *)new ABYParty(arg1,(std::string const &)*arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  *(ABYParty **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_tu_1darmstadt_cs_encrypto_aby_AbyJNI_new_1ABYParty_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jint jarg3, jlong jarg4, jobject jarg4_, jlong jarg5, jlong jarg6, jint jarg7) {
  jlong jresult = 0 ;
  e_role arg1 ;
  std::string *arg2 = 0 ;
  uint16_t arg3 ;
  seclvl arg4 ;
  uint32_t arg5 ;
  uint32_t arg6 ;
  e_mt_gen_alg arg7 ;
  seclvl *argp4 ;
  ABYParty *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg4_;
  arg1 = (e_role)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (uint16_t)jarg3; 
  argp4 = *(seclvl **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null seclvl");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = (uint32_t)jarg5; 
  arg6 = (uint32_t)jarg6; 
  arg7 = (e_mt_gen_alg)jarg7; 
  result = (ABYParty *)new ABYParty(arg1,(std::string const &)*arg2,arg3,arg4,arg5,arg6,arg7);
  *(ABYParty **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_tu_1darmstadt_cs_encrypto_aby_AbyJNI_new_1ABYParty_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jint jarg3, jlong jarg4, jobject jarg4_, jlong jarg5, jlong jarg6) {
  jlong jresult = 0 ;
  e_role arg1 ;
  std::string *arg2 = 0 ;
  uint16_t arg3 ;
  seclvl arg4 ;
  uint32_t arg5 ;
  uint32_t arg6 ;
  seclvl *argp4 ;
  ABYParty *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg4_;
  arg1 = (e_role)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (uint16_t)jarg3; 
  argp4 = *(seclvl **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null seclvl");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = (uint32_t)jarg5; 
  arg6 = (uint32_t)jarg6; 
  result = (ABYParty *)new ABYParty(arg1,(std::string const &)*arg2,arg3,arg4,arg5,arg6);
  *(ABYParty **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_tu_1darmstadt_cs_encrypto_aby_AbyJNI_new_1ABYParty_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jint jarg3, jlong jarg4, jobject jarg4_, jlong jarg5) {
  jlong jresult = 0 ;
  e_role arg1 ;
  std::string *arg2 = 0 ;
  uint16_t arg3 ;
  seclvl arg4 ;
  uint32_t arg5 ;
  seclvl *argp4 ;
  ABYParty *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg4_;
  arg1 = (e_role)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (uint16_t)jarg3; 
  argp4 = *(seclvl **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null seclvl");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = (uint32_t)jarg5; 
  result = (ABYParty *)new ABYParty(arg1,(std::string const &)*arg2,arg3,arg4,arg5);
  *(ABYParty **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_tu_1darmstadt_cs_encrypto_aby_AbyJNI_new_1ABYParty_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jint jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  e_role arg1 ;
  std::string *arg2 = 0 ;
  uint16_t arg3 ;
  seclvl arg4 ;
  seclvl *argp4 ;
  ABYParty *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg4_;
  arg1 = (e_role)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (uint16_t)jarg3; 
  argp4 = *(seclvl **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null seclvl");
    return 0;
  }
  arg4 = *argp4; 
  result = (ABYParty *)new ABYParty(arg1,(std::string const &)*arg2,arg3,arg4);
  *(ABYParty **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_tu_1darmstadt_cs_encrypto_aby_AbyJNI_new_1ABYParty_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jint jarg3) {
  jlong jresult = 0 ;
  e_role arg1 ;
  std::string *arg2 = 0 ;
  uint16_t arg3 ;
  ABYParty *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (e_role)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (uint16_t)jarg3; 
  result = (ABYParty *)new ABYParty(arg1,(std::string const &)*arg2,arg3);
  *(ABYParty **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_tu_1darmstadt_cs_encrypto_aby_AbyJNI_new_1ABYParty_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  e_role arg1 ;
  std::string *arg2 = 0 ;
  ABYParty *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (e_role)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (ABYParty *)new ABYParty(arg1,(std::string const &)*arg2);
  *(ABYParty **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_tu_1darmstadt_cs_encrypto_aby_AbyJNI_new_1ABYParty_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  e_role arg1 ;
  ABYParty *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (e_role)jarg1; 
  result = (ABYParty *)new ABYParty(arg1);
  *(ABYParty **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_tu_1darmstadt_cs_encrypto_aby_AbyJNI_delete_1ABYParty(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ABYParty *arg1 = (ABYParty *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ABYParty **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_de_tu_1darmstadt_cs_encrypto_aby_AbyJNI_ABYParty_1connectAndBaseOTs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ABYParty *arg1 = (ABYParty *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ABYParty **)&jarg1; 
  (arg1)->ConnectAndBaseOTs();
}


SWIGEXPORT void JNICALL Java_de_tu_1darmstadt_cs_encrypto_aby_AbyJNI_ABYParty_1execCircuit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ABYParty *arg1 = (ABYParty *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ABYParty **)&jarg1; 
  (arg1)->ExecCircuit();
}


SWIGEXPORT void JNICALL Java_de_tu_1darmstadt_cs_encrypto_aby_AbyJNI_ABYParty_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ABYParty *arg1 = (ABYParty *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ABYParty **)&jarg1; 
  (arg1)->Reset();
}


SWIGEXPORT jdouble JNICALL Java_de_tu_1darmstadt_cs_encrypto_aby_AbyJNI_ABYParty_1getTiming(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  ABYParty *arg1 = (ABYParty *) 0 ;
  ABYPHASE arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ABYParty **)&jarg1; 
  arg2 = (ABYPHASE)jarg2; 
  result = (double)(arg1)->GetTiming(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_de_tu_1darmstadt_cs_encrypto_aby_AbyJNI_ABYParty_1getSentData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jobject jresult = 0 ;
  ABYParty *arg1 = (ABYParty *) 0 ;
  ABYPHASE arg2 ;
  uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ABYParty **)&jarg1; 
  arg2 = (ABYPHASE)jarg2; 
  result = (uint64_t)(arg1)->GetSentData(arg2);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jenv->DeleteLocalRef(ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_de_tu_1darmstadt_cs_encrypto_aby_AbyJNI_ABYParty_1getReceivedData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jobject jresult = 0 ;
  ABYParty *arg1 = (ABYParty *) 0 ;
  ABYPHASE arg2 ;
  uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ABYParty **)&jarg1; 
  arg2 = (ABYPHASE)jarg2; 
  result = (uint64_t)(arg1)->GetReceivedData(arg2);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jenv->DeleteLocalRef(ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_tu_1darmstadt_cs_encrypto_aby_AbyJNI_ABYParty_1getTotalGates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ABYParty *arg1 = (ABYParty *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ABYParty **)&jarg1; 
  result = (uint32_t)(arg1)->GetTotalGates();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_tu_1darmstadt_cs_encrypto_aby_AbyJNI_ABYParty_1getTotalDepth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ABYParty *arg1 = (ABYParty *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ABYParty **)&jarg1; 
  result = (uint32_t)(arg1)->GetTotalDepth();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_tu_1darmstadt_cs_encrypto_aby_AbyJNI_ABYParty_1getCircuitBuilder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  ABYParty *arg1 = (ABYParty *) 0 ;
  e_sharing arg2 ;
  Circuit *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ABYParty **)&jarg1; 
  arg2 = (e_sharing)jarg2; 
  result = (Circuit *)ABYParty_GetCircuitBuilder(arg1,arg2);
  *(Circuit **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_tu_1darmstadt_cs_encrypto_aby_AbyJNI_Circuit_1getShareBitLen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Circuit *arg1 = (Circuit *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Circuit **)&jarg1; 
  result = (uint32_t)(arg1)->GetShareBitLen();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_tu_1darmstadt_cs_encrypto_aby_AbyJNI_Circuit_1getMaxDepth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Circuit *arg1 = (Circuit *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Circuit **)&jarg1; 
  result = (uint32_t)(arg1)->GetMaxDepth();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_tu_1darmstadt_cs_encrypto_aby_AbyJNI_Circuit_1getNumInputBitsForParty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  Circuit *arg1 = (Circuit *) 0 ;
  e_role arg2 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Circuit **)&jarg1; 
  arg2 = (e_role)jarg2; 
  result = (uint32_t)(arg1)->GetNumInputBitsForParty(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_tu_1darmstadt_cs_encrypto_aby_AbyJNI_Circuit_1getNumOutputBitsForParty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  Circuit *arg1 = (Circuit *) 0 ;
  e_role arg2 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Circuit **)&jarg1; 
  arg2 = (e_role)jarg2; 
  result = (uint32_t)(arg1)->GetNumOutputBitsForParty(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_tu_1darmstadt_cs_encrypto_aby_AbyJNI_Circuit_1getContext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Circuit *arg1 = (Circuit *) 0 ;
  e_sharing result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Circuit **)&jarg1; 
  result = (e_sharing)(arg1)->GetContext();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_tu_1darmstadt_cs_encrypto_aby_AbyJNI_Circuit_1getNumGates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Circuit *arg1 = (Circuit *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Circuit **)&jarg1; 
  result = (uint32_t)(arg1)->GetNumGates();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_tu_1darmstadt_cs_encrypto_aby_AbyJNI_Circuit_1putCONSGate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  Circuit *arg1 = (Circuit *) 0 ;
  UGATE_T arg2 ;
  uint32_t arg3 ;
  share *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Circuit **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (UGATE_T)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (UGATE_T)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg3 = (uint32_t)jarg3; 
  result = (share *)(arg1)->PutCONSGate(arg2,arg3);
  *(share **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_tu_1darmstadt_cs_encrypto_aby_AbyJNI_Circuit_1putINGate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2, jlong jarg3, jint jarg4) {
  jlong jresult = 0 ;
  Circuit *arg1 = (Circuit *) 0 ;
  uint64_t arg2 ;
  uint32_t arg3 ;
  e_role arg4 ;
  share *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Circuit **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg3 = (uint32_t)jarg3; 
  arg4 = (e_role)jarg4; 
  result = (share *)(arg1)->PutINGate(arg2,arg3,arg4);
  *(share **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_tu_1darmstadt_cs_encrypto_aby_AbyJNI_Circuit_1putDummyINGate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  Circuit *arg1 = (Circuit *) 0 ;
  uint32_t arg2 ;
  share *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Circuit **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  result = (share *)(arg1)->PutDummyINGate(arg2);
  *(share **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_tu_1darmstadt_cs_encrypto_aby_AbyJNI_Circuit_1putSharedINGate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  Circuit *arg1 = (Circuit *) 0 ;
  uint64_t arg2 ;
  uint32_t arg3 ;
  share *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Circuit **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg3 = (uint32_t)jarg3; 
  result = (share *)(arg1)->PutSharedINGate(arg2,arg3);
  *(share **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_tu_1darmstadt_cs_encrypto_aby_AbyJNI_Circuit_1putADDGate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  Circuit *arg1 = (Circuit *) 0 ;
  share *arg2 = (share *) 0 ;
  share *arg3 = (share *) 0 ;
  share *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Circuit **)&jarg1; 
  arg2 = *(share **)&jarg2; 
  arg3 = *(share **)&jarg3; 
  result = (share *)(arg1)->PutADDGate(arg2,arg3);
  *(share **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_tu_1darmstadt_cs_encrypto_aby_AbyJNI_Circuit_1putSUBGate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  Circuit *arg1 = (Circuit *) 0 ;
  share *arg2 = (share *) 0 ;
  share *arg3 = (share *) 0 ;
  share *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Circuit **)&jarg1; 
  arg2 = *(share **)&jarg2; 
  arg3 = *(share **)&jarg3; 
  result = (share *)(arg1)->PutSUBGate(arg2,arg3);
  *(share **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_tu_1darmstadt_cs_encrypto_aby_AbyJNI_Circuit_1putANDGate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  Circuit *arg1 = (Circuit *) 0 ;
  share *arg2 = (share *) 0 ;
  share *arg3 = (share *) 0 ;
  share *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Circuit **)&jarg1; 
  arg2 = *(share **)&jarg2; 
  arg3 = *(share **)&jarg3; 
  result = (share *)(arg1)->PutANDGate(arg2,arg3);
  *(share **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_tu_1darmstadt_cs_encrypto_aby_AbyJNI_Circuit_1putXORGate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  Circuit *arg1 = (Circuit *) 0 ;
  share *arg2 = (share *) 0 ;
  share *arg3 = (share *) 0 ;
  share *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Circuit **)&jarg1; 
  arg2 = *(share **)&jarg2; 
  arg3 = *(share **)&jarg3; 
  result = (share *)(arg1)->PutXORGate(arg2,arg3);
  *(share **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_tu_1darmstadt_cs_encrypto_aby_AbyJNI_Circuit_1putMULGate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  Circuit *arg1 = (Circuit *) 0 ;
  share *arg2 = (share *) 0 ;
  share *arg3 = (share *) 0 ;
  share *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Circuit **)&jarg1; 
  arg2 = *(share **)&jarg2; 
  arg3 = *(share **)&jarg3; 
  result = (share *)(arg1)->PutMULGate(arg2,arg3);
  *(share **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_tu_1darmstadt_cs_encrypto_aby_AbyJNI_Circuit_1putGTGate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  Circuit *arg1 = (Circuit *) 0 ;
  share *arg2 = (share *) 0 ;
  share *arg3 = (share *) 0 ;
  share *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Circuit **)&jarg1; 
  arg2 = *(share **)&jarg2; 
  arg3 = *(share **)&jarg3; 
  result = (share *)(arg1)->PutGTGate(arg2,arg3);
  *(share **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_tu_1darmstadt_cs_encrypto_aby_AbyJNI_Circuit_1putEQGate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  Circuit *arg1 = (Circuit *) 0 ;
  share *arg2 = (share *) 0 ;
  share *arg3 = (share *) 0 ;
  share *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Circuit **)&jarg1; 
  arg2 = *(share **)&jarg2; 
  arg3 = *(share **)&jarg3; 
  result = (share *)(arg1)->PutEQGate(arg2,arg3);
  *(share **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_tu_1darmstadt_cs_encrypto_aby_AbyJNI_Circuit_1putMUXGate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  Circuit *arg1 = (Circuit *) 0 ;
  share *arg2 = (share *) 0 ;
  share *arg3 = (share *) 0 ;
  share *arg4 = (share *) 0 ;
  share *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(Circuit **)&jarg1; 
  arg2 = *(share **)&jarg2; 
  arg3 = *(share **)&jarg3; 
  arg4 = *(share **)&jarg4; 
  result = (share *)(arg1)->PutMUXGate(arg2,arg3,arg4);
  *(share **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_tu_1darmstadt_cs_encrypto_aby_AbyJNI_Circuit_1putUniversalGate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4) {
  jlong jresult = 0 ;
  Circuit *arg1 = (Circuit *) 0 ;
  share *arg2 = (share *) 0 ;
  share *arg3 = (share *) 0 ;
  uint32_t arg4 ;
  share *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Circuit **)&jarg1; 
  arg2 = *(share **)&jarg2; 
  arg3 = *(share **)&jarg3; 
  arg4 = (uint32_t)jarg4; 
  result = (share *)(arg1)->PutUniversalGate(arg2,arg3,arg4);
  *(share **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_tu_1darmstadt_cs_encrypto_aby_AbyJNI_Circuit_1putY2BGate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Circuit *arg1 = (Circuit *) 0 ;
  share *arg2 = (share *) 0 ;
  share *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Circuit **)&jarg1; 
  arg2 = *(share **)&jarg2; 
  result = (share *)(arg1)->PutY2BGate(arg2);
  *(share **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_tu_1darmstadt_cs_encrypto_aby_AbyJNI_Circuit_1putB2AGate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Circuit *arg1 = (Circuit *) 0 ;
  share *arg2 = (share *) 0 ;
  share *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Circuit **)&jarg1; 
  arg2 = *(share **)&jarg2; 
  result = (share *)(arg1)->PutB2AGate(arg2);
  *(share **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_tu_1darmstadt_cs_encrypto_aby_AbyJNI_Circuit_1putB2YGate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Circuit *arg1 = (Circuit *) 0 ;
  share *arg2 = (share *) 0 ;
  share *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Circuit **)&jarg1; 
  arg2 = *(share **)&jarg2; 
  result = (share *)(arg1)->PutB2YGate(arg2);
  *(share **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_tu_1darmstadt_cs_encrypto_aby_AbyJNI_Circuit_1putA2YGate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Circuit *arg1 = (Circuit *) 0 ;
  share *arg2 = (share *) 0 ;
  share *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Circuit **)&jarg1; 
  arg2 = *(share **)&jarg2; 
  result = (share *)(arg1)->PutA2YGate(arg2);
  *(share **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_tu_1darmstadt_cs_encrypto_aby_AbyJNI_Circuit_1putY2AGate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  Circuit *arg1 = (Circuit *) 0 ;
  share *arg2 = (share *) 0 ;
  Circuit *arg3 = (Circuit *) 0 ;
  share *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Circuit **)&jarg1; 
  arg2 = *(share **)&jarg2; 
  arg3 = *(Circuit **)&jarg3; 
  result = (share *)(arg1)->PutY2AGate(arg2,arg3);
  *(share **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_tu_1darmstadt_cs_encrypto_aby_AbyJNI_Circuit_1putA2BGate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  Circuit *arg1 = (Circuit *) 0 ;
  share *arg2 = (share *) 0 ;
  Circuit *arg3 = (Circuit *) 0 ;
  share *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Circuit **)&jarg1; 
  arg2 = *(share **)&jarg2; 
  arg3 = *(Circuit **)&jarg3; 
  result = (share *)(arg1)->PutA2BGate(arg2,arg3);
  *(share **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_tu_1darmstadt_cs_encrypto_aby_AbyJNI_Circuit_1putANDVecGate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  Circuit *arg1 = (Circuit *) 0 ;
  share *arg2 = (share *) 0 ;
  share *arg3 = (share *) 0 ;
  share *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Circuit **)&jarg1; 
  arg2 = *(share **)&jarg2; 
  arg3 = *(share **)&jarg3; 
  result = (share *)(arg1)->PutANDVecGate(arg2,arg3);
  *(share **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_tu_1darmstadt_cs_encrypto_aby_AbyJNI_Circuit_1putPrintValueGate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jlong jresult = 0 ;
  Circuit *arg1 = (Circuit *) 0 ;
  share *arg2 = (share *) 0 ;
  std::string arg3 ;
  share *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Circuit **)&jarg1; 
  arg2 = *(share **)&jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (share *)(arg1)->PutPrintValueGate(arg2,arg3);
  *(share **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_tu_1darmstadt_cs_encrypto_aby_AbyJNI_Circuit_1putRepeaterGate_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  Circuit *arg1 = (Circuit *) 0 ;
  uint32_t arg2 ;
  share *arg3 = (share *) 0 ;
  share *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(Circuit **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  arg3 = *(share **)&jarg3; 
  result = (share *)(arg1)->PutRepeaterGate(arg2,arg3);
  *(share **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_tu_1darmstadt_cs_encrypto_aby_AbyJNI_Circuit_1putRepeaterGate_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  Circuit *arg1 = (Circuit *) 0 ;
  uint32_t arg2 ;
  uint32_t arg3 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Circuit **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  arg3 = (uint32_t)jarg3; 
  result = (uint32_t)(arg1)->PutRepeaterGate(arg2,arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_tu_1darmstadt_cs_encrypto_aby_AbyJNI_Circuit_1putOUTGate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jlong jresult = 0 ;
  Circuit *arg1 = (Circuit *) 0 ;
  share *arg2 = (share *) 0 ;
  e_role arg3 ;
  share *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Circuit **)&jarg1; 
  arg2 = *(share **)&jarg2; 
  arg3 = (e_role)jarg3; 
  result = (share *)(arg1)->PutOUTGate(arg2,arg3);
  *(share **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_tu_1darmstadt_cs_encrypto_aby_AbyJNI_Circuit_1putSharedOUTGate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Circuit *arg1 = (Circuit *) 0 ;
  share *arg2 = (share *) 0 ;
  share *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Circuit **)&jarg1; 
  arg2 = *(share **)&jarg2; 
  result = (share *)(arg1)->PutSharedOUTGate(arg2);
  *(share **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_tu_1darmstadt_cs_encrypto_aby_AbyJNI_Circuit_1putINVGate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  Circuit *arg1 = (Circuit *) 0 ;
  uint32_t arg2 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Circuit **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  result = (uint32_t)(arg1)->PutINVGate(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_tu_1darmstadt_cs_encrypto_aby_AbyJNI_Circuit_1getCircuitType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Circuit *arg1 = (Circuit *) 0 ;
  e_circuit result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Circuit **)&jarg1; 
  result = (e_circuit)(arg1)->GetCircuitType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_tu_1darmstadt_cs_encrypto_aby_AbyJNI_Circuit_1getNumCombGates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Circuit *arg1 = (Circuit *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Circuit **)&jarg1; 
  result = (int)(arg1)->GetNumCombGates();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_tu_1darmstadt_cs_encrypto_aby_AbyJNI_Circuit_1getNumStructCombGates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Circuit *arg1 = (Circuit *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Circuit **)&jarg1; 
  result = (int)(arg1)->GetNumStructCombGates();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_tu_1darmstadt_cs_encrypto_aby_AbyJNI_Circuit_1getNumPermGates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Circuit *arg1 = (Circuit *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Circuit **)&jarg1; 
  result = (int)(arg1)->GetNumPermGates();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_tu_1darmstadt_cs_encrypto_aby_AbyJNI_Circuit_1getNumSubsetGates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Circuit *arg1 = (Circuit *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Circuit **)&jarg1; 
  result = (int)(arg1)->GetNumSubsetGates();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_tu_1darmstadt_cs_encrypto_aby_AbyJNI_Circuit_1getNumSplitGates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Circuit *arg1 = (Circuit *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Circuit **)&jarg1; 
  result = (int)(arg1)->GetNumSplitGates();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_tu_1darmstadt_cs_encrypto_aby_AbyJNI_Circuit_1getRole(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Circuit *arg1 = (Circuit *) 0 ;
  e_role result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Circuit **)&jarg1; 
  result = (e_role)(arg1)->GetRole();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_tu_1darmstadt_cs_encrypto_aby_AbyJNI_Circuit_1exportCircuitInBristolFormat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jstring jarg5) {
  Circuit *arg1 = (Circuit *) 0 ;
  share *arg2 = (share *) 0 ;
  share *arg3 = (share *) 0 ;
  share *arg4 = (share *) 0 ;
  char *arg5 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(Circuit **)&jarg1; 
  arg2 = *(share **)&jarg2; 
  arg3 = *(share **)&jarg3; 
  arg4 = *(share **)&jarg4; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return ;
  }
  (arg1)->ExportCircuitInBristolFormat(arg2,arg3,arg4,(char const *)arg5);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
}


SWIGEXPORT jlong JNICALL Java_de_tu_1darmstadt_cs_encrypto_aby_AbyJNI_createNewShare_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  uint32_t arg1 ;
  Circuit *arg2 = (Circuit *) 0 ;
  share *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = (uint32_t)jarg1; 
  arg2 = *(Circuit **)&jarg2; 
  result = (share *)create_new_share(arg1,arg2);
  *(share **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_tu_1darmstadt_cs_encrypto_aby_AbyJNI_createNewShare_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  std::vector< uint32_t > arg1 ;
  Circuit *arg2 = (Circuit *) 0 ;
  std::vector< uint32_t > *argp1 ;
  share *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(std::vector< uint32_t > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< uint32_t >");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = *(Circuit **)&jarg2; 
  result = (share *)create_new_share(arg1,arg2);
  *(share **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_tu_1darmstadt_cs_encrypto_aby_AbyJNI_Share_1getWires(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  share *arg1 = (share *) 0 ;
  std::vector< uint32_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(share **)&jarg1; 
  result = (std::vector< uint32_t > *) &(arg1)->get_wires();
  *(std::vector< uint32_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_tu_1darmstadt_cs_encrypto_aby_AbyJNI_Share_1getWireId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  share *arg1 = (share *) 0 ;
  uint32_t arg2 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(share **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  result = (uint32_t)(arg1)->get_wire_id(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_tu_1darmstadt_cs_encrypto_aby_AbyJNI_Share_1getWireIdsAsShare(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  share *arg1 = (share *) 0 ;
  uint32_t arg2 ;
  share *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(share **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  result = (share *)(arg1)->get_wire_ids_as_share(arg2);
  *(share **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_tu_1darmstadt_cs_encrypto_aby_AbyJNI_Share_1setWireId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  share *arg1 = (share *) 0 ;
  uint32_t arg2 ;
  uint32_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(share **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  arg3 = (uint32_t)jarg3; 
  (arg1)->set_wire_id(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_de_tu_1darmstadt_cs_encrypto_aby_AbyJNI_Share_1setWireIds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  share *arg1 = (share *) 0 ;
  std::vector< uint32_t > arg2 ;
  std::vector< uint32_t > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(share **)&jarg1; 
  argp2 = *(std::vector< uint32_t > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< uint32_t >");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->set_wire_ids(arg2);
}


SWIGEXPORT jlong JNICALL Java_de_tu_1darmstadt_cs_encrypto_aby_AbyJNI_Share_1getBitlength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  share *arg1 = (share *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(share **)&jarg1; 
  result = (uint32_t)(arg1)->get_bitlength();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_tu_1darmstadt_cs_encrypto_aby_AbyJNI_Share_1setBitlength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  share *arg1 = (share *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(share **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  (arg1)->set_bitlength(arg2);
}


SWIGEXPORT jlong JNICALL Java_de_tu_1darmstadt_cs_encrypto_aby_AbyJNI_Share_1getMaxBitlength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  share *arg1 = (share *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(share **)&jarg1; 
  result = (uint32_t)(arg1)->get_max_bitlength();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_tu_1darmstadt_cs_encrypto_aby_AbyJNI_Share_1setMaxBitlength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  share *arg1 = (share *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(share **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  (arg1)->set_max_bitlength(arg2);
}


SWIGEXPORT jlong JNICALL Java_de_tu_1darmstadt_cs_encrypto_aby_AbyJNI_Share_1getNvals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  share *arg1 = (share *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(share **)&jarg1; 
  result = (uint32_t)(arg1)->get_nvals();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_tu_1darmstadt_cs_encrypto_aby_AbyJNI_Share_1getNvalsOnWire(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  share *arg1 = (share *) 0 ;
  uint32_t arg2 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(share **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  result = (uint32_t)(arg1)->get_nvals_on_wire(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_tu_1darmstadt_cs_encrypto_aby_AbyJNI_Share_1getCircuitType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  share *arg1 = (share *) 0 ;
  e_circuit result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(share **)&jarg1; 
  result = (e_circuit)(arg1)->get_circuit_type();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_tu_1darmstadt_cs_encrypto_aby_AbyJNI_Share_1getShareType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  share *arg1 = (share *) 0 ;
  e_sharing result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(share **)&jarg1; 
  result = (e_sharing)(arg1)->get_share_type();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_de_tu_1darmstadt_cs_encrypto_aby_AbyJNI_Share_1getClearValue8(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  share *arg1 = (share *) 0 ;
  unsigned char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(share **)&jarg1; 
  result = (unsigned char)(arg1)->SWIGTEMPLATEDISAMBIGUATOR get_clear_value< uint8_t >();
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_de_tu_1darmstadt_cs_encrypto_aby_AbyJNI_Share_1getClearValue16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  share *arg1 = (share *) 0 ;
  unsigned short result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(share **)&jarg1; 
  result = (unsigned short)(arg1)->SWIGTEMPLATEDISAMBIGUATOR get_clear_value< uint16_t >();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_tu_1darmstadt_cs_encrypto_aby_AbyJNI_Share_1getClearValue32(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  share *arg1 = (share *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(share **)&jarg1; 
  result = (unsigned int)(arg1)->SWIGTEMPLATEDISAMBIGUATOR get_clear_value< uint32_t >();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_de_tu_1darmstadt_cs_encrypto_aby_AbyJNI_Share_1getClearValue64(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  share *arg1 = (share *) 0 ;
  unsigned long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(share **)&jarg1; 
  result = (unsigned long long)(arg1)->SWIGTEMPLATEDISAMBIGUATOR get_clear_value< uint64_t >();
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jenv->DeleteLocalRef(ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_tu_1darmstadt_cs_encrypto_aby_AbyJNI_ST_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  seclvl *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (seclvl *)&ST;
  *(seclvl **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_tu_1darmstadt_cs_encrypto_aby_AbyJNI_MT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  seclvl *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (seclvl *)&MT;
  *(seclvl **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_tu_1darmstadt_cs_encrypto_aby_AbyJNI_LT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  seclvl *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (seclvl *)&LT;
  *(seclvl **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_tu_1darmstadt_cs_encrypto_aby_AbyJNI_XLT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  seclvl *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (seclvl *)&XLT;
  *(seclvl **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_tu_1darmstadt_cs_encrypto_aby_AbyJNI_XXLT_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  seclvl *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (seclvl *)&XXLT;
  *(seclvl **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_tu_1darmstadt_cs_encrypto_aby_AbyJNI_SecurityLevel_1statbits_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  SECURITYLEVELS *arg1 = (SECURITYLEVELS *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SECURITYLEVELS **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->statbits = arg2;
}


SWIGEXPORT jlong JNICALL Java_de_tu_1darmstadt_cs_encrypto_aby_AbyJNI_SecurityLevel_1statbits_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SECURITYLEVELS *arg1 = (SECURITYLEVELS *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SECURITYLEVELS **)&jarg1; 
  result = (uint32_t) ((arg1)->statbits);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_tu_1darmstadt_cs_encrypto_aby_AbyJNI_SecurityLevel_1symbits_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  SECURITYLEVELS *arg1 = (SECURITYLEVELS *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SECURITYLEVELS **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->symbits = arg2;
}


SWIGEXPORT jlong JNICALL Java_de_tu_1darmstadt_cs_encrypto_aby_AbyJNI_SecurityLevel_1symbits_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SECURITYLEVELS *arg1 = (SECURITYLEVELS *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SECURITYLEVELS **)&jarg1; 
  result = (uint32_t) ((arg1)->symbits);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_de_tu_1darmstadt_cs_encrypto_aby_AbyJNI_SecurityLevel_1ifcbits_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  SECURITYLEVELS *arg1 = (SECURITYLEVELS *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SECURITYLEVELS **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->ifcbits = arg2;
}


SWIGEXPORT jlong JNICALL Java_de_tu_1darmstadt_cs_encrypto_aby_AbyJNI_SecurityLevel_1ifcbits_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  SECURITYLEVELS *arg1 = (SECURITYLEVELS *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(SECURITYLEVELS **)&jarg1; 
  result = (uint32_t) ((arg1)->ifcbits);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_de_tu_1darmstadt_cs_encrypto_aby_AbyJNI_new_1SecurityLevel(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  SECURITYLEVELS *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (SECURITYLEVELS *)new SECURITYLEVELS();
  *(SECURITYLEVELS **)&jresult = result; 
  return jresult;
}


#ifdef __cplusplus
}
#endif

